{
    "project": {
        "name": "j-visualizer",
        "description": "",
        "version": "0.1.0",
        "url": ""
    },
    "files": {
        "build/js/j-visualizer.js": {
            "name": "build/js/j-visualizer.js",
            "modules": {},
            "classes": {
                "Visualizer": 1,
                "Visualizer.Colorer": 1,
                "Visualizer.Scene": 1,
                "Visualizer.World": 1,
                "Visualizer.Utils": 1,
                "Visualizer.Module": 1,
                "Visualizer.ModuleView": 1,
                "Visualizer.ModuleView.ResizableMixin": 1
            },
            "fors": {
                "Array": 1,
                "NativeClass.Array": 1,
                "fn": 1,
                "String": 1,
                "NativeClass.String": 1
            },
            "namespaces": {
                "Visualizer": 1,
                "NativeClass": 1,
                "jQuery": 1,
                "Visualizer.ModuleView": 1
            }
        }
    },
    "modules": {},
    "classes": {
        "Visualizer": {
            "name": "Visualizer",
            "shortname": "Visualizer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/js/j-visualizer.js",
            "line": 2,
            "description": "Visualizer Object\nRepresents the Object used to manage data (Modules), and the way that the data's viewed.\n\nThe visualization of data is a combined effort of all components contained in this project,\naccessed through this Object.",
            "extends": "Ember.Object"
        },
        "Visualizer.Colorer": {
            "name": "Visualizer.Colorer",
            "shortname": "Visualizer.Colorer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Visualizer",
            "file": "build/js/j-visualizer.js",
            "line": 232,
            "description": "Visualizer Colorer\nAn Object that manages the many colors of a visualization.",
            "todo": [
                "refactor this file",
                "simplify color sets",
                "make generally less confusing."
            ],
            "extends": "Ember.Object"
        },
        "Visualizer.Scene": {
            "name": "Visualizer.Scene",
            "shortname": "Visualizer.Scene",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Visualizer",
            "file": "build/js/j-visualizer.js",
            "line": 564,
            "description": "Visualizer Scene\nRepresents the Object used to manage data (Modules), and the way the data's viewed.\n\nThe visualization of data is a combined effort of all components contained in this project,\naccessed through this Object.",
            "extends": "Ember.Object"
        },
        "Visualizer.World": {
            "name": "Visualizer.World",
            "shortname": "Visualizer.World",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Visualizer",
            "file": "build/js/j-visualizer.js",
            "line": 748,
            "description": "Visualizer World\nRepresents an Object used to manage an overview viewport for visualizations.",
            "extends": "Ember.Object"
        },
        "NativeClass.Array": {
            "name": "NativeClass.Array",
            "shortname": "Array",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "NativeClass"
        },
        "jQuery.fn": {
            "name": "jQuery.fn",
            "shortname": "fn",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "jQuery"
        },
        "NativeClass.String": {
            "name": "NativeClass.String",
            "shortname": "String",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "NativeClass"
        },
        "Visualizer.Utils": {
            "name": "Visualizer.Utils",
            "shortname": "Visualizer.Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Visualizer",
            "file": "build/js/j-visualizer.js",
            "line": 1150,
            "description": "Visualizer Utils\nA collection of common utility functions used in the Visualizer."
        },
        "Visualizer.Module": {
            "name": "Visualizer.Module",
            "shortname": "Visualizer.Module",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Visualizer",
            "file": "build/js/j-visualizer.js",
            "line": 1469,
            "description": "Visualizer Module\nA Visualizer Module is a collection of data used for Visualization.\nIt keeps access slightly standardized and offers several helpers to\nsimplify data management.\n\nEach Module also has a collection of relevant ModuleViews - Objects that\ndefine and take care of how a given Module's data can be displayed.",
            "extends": "Ember.ArrayController"
        },
        "Visualizer.ModuleView": {
            "name": "Visualizer.ModuleView",
            "shortname": "Visualizer.ModuleView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Visualizer",
            "file": "build/js/j-visualizer.js",
            "line": 1653,
            "description": "Visualizer ModuleView\nModule Views encapsulate the functionality for drawing,\ncoloring, and handling events on visualizations of the data\nprovided by a Module. These are the \"visual\" side of\ndata visualizations.",
            "extends": "Ember.Object"
        },
        "Visualizer.ModuleView.ResizableMixin": {
            "name": "Visualizer.ModuleView.ResizableMixin",
            "shortname": "Visualizer.ModuleView.ResizableMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Visualizer.ModuleView"
            ],
            "namespace": "Visualizer.ModuleView",
            "file": "build/js/j-visualizer.js",
            "line": 1994,
            "description": "ResizableMixin\nA helper mixin for ModuleViews which can have their size set manually.\nThis simplifies specifying size, padding, and position of a ModuleView\nviewport container, and allows values to be set either relatively\n(as a percentage of the Visualizer's World), or explicitly (e.g. \"50px\" or 50)",
            "extends": "Ember.Mixin"
        }
    },
    "classitems": [
        {
            "file": "build/js/j-visualizer.js",
            "line": 19,
            "description": "world is a reference to a Visualizer.World Object,\nrepresenting the main (overview) viewport.\nFurther details/documentation can be found in the vis_world file",
            "itemtype": "property",
            "name": "world",
            "type": "Object",
            "class": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 29,
            "description": "scenes is a reference to a collection of Visualizer.Scene Objects,\neach representing a Visualization (one or many views, on one or many datasets).\nFurther details/documentation can be found in the vis_scene file",
            "itemtype": "property",
            "name": "scenes",
            "type": "Object",
            "class": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 41,
            "description": "modules is a reference to a collection of Visualizer.Module Objects,\nwhich in turn are responsible for modelling the data collections\nand their relevant views.\nFurther details/documentation can be found in the _visualizer_module file.",
            "itemtype": "property",
            "name": "modules",
            "type": "Object",
            "class": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 54,
            "description": "associations is a reference to a collective Object datastore for cross-Module\ndata.\n\nCurrently this is implemented as a simple Object, but eventually it\nmay make sense to create standardized Visualizer.Association objects\nsimilar to Visualizer.Modules...",
            "itemtype": "property",
            "name": "associations",
            "type": "Object",
            "class": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 69,
            "description": "timers is a reference to an Object collection of Timeouts where\nkeys are names given, and values are Timeout ids (as natively generated by setTimeout).\nThis set is used to keep track of actions on a per-Visualizer level when\npreventing multiple exectution via Visualizer.Utils.waitForRepeatingEvents.\nFurther details/documentation can be found in Visualizer.Utils",
            "itemtype": "property",
            "name": "timers",
            "type": "Object",
            "class": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 83,
            "description": "init is called upon creation of a Visualizer Object.\nIt is responsible for the initial processing and setup of the Object.",
            "params": [
                {
                    "name": "world",
                    "description": "Used for setting up the Visualizer.World Object"
                }
            ],
            "is_constructor": 1,
            "class": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 97,
            "description": "useWorld creates a Visualizer.World object, using the a JQuery Object\ncreated with the sent parameter. This created object is set as the\nVisualizer Object's world property.",
            "itemtype": "method",
            "name": "useWorld",
            "params": [
                {
                    "name": "world",
                    "description": "Used for setting up the Visualizer.World Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 113,
            "description": "Alias for Visualizer.World method: injectDefaultWorld",
            "deprecated": true,
            "deprecationMessage": "Use (visualizer).get('world').injectDefaultWorld()",
            "class": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 121,
            "description": "addModule creates a Visualizer.Module object specified by the moduleClass parameter,\nusing a provided key (to allow differentiation and access). If (optional) content\nparameter is provided, it will be set as the module's content.\n\nAfter the module's creation, the Visualizer object is refreshed.",
            "itemtype": "method",
            "name": "addModule",
            "params": [
                {
                    "name": "moduleClass",
                    "description": "Class of a Visualizer.Module Object to be created",
                    "type": "Module"
                },
                {
                    "name": "moduleKey",
                    "description": "Key used by the Visualizer and module for access and differentiation",
                    "type": "String"
                },
                {
                    "name": "content",
                    "description": "(Optional) Collection of data to use immediately with the module",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 145,
            "description": "refresh sends a request to the current scene to update the visualization\nbased on all current dimensions.\n\nThe scene will not be drawn unless the Visualizer's World is loaded (has a viewport).\n\nrefresh observes the world's state, and the current scene - it should automatically\nbe triggered when any of these things change to ensure an up-to-date Visualization.\n\nNote: because Ember Observers currently only watch Array collections (@each), not Object-maps,\nThis will (sadly) not currently watch 'modules.@each.dataset'...",
            "itemtype": "method",
            "name": "refresh",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 167,
            "description": "useScenes updates the Visualizer's scenes collection with the inputScenes parameter.\nFor each item in inputScenes , a Visualizer.Scene object is created, with a\nreference to this instance of Visualizer as its visualizer parameter.",
            "itemtype": "method",
            "name": "useScenes",
            "params": [
                {
                    "name": "inputScenes",
                    "description": "A set of scenes to create and use for Visualization.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 198,
            "description": "setScene updates the Visualizer's currentScene property to reference the\nscene relevant to the method's _identifier parameter.",
            "itemtype": "method",
            "name": "setScene",
            "params": [
                {
                    "name": "_identifier",
                    "description": "The key identifier of a scene to use.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 210,
            "description": "destroy cleans up the Visualizer (asking each Module to remove its Views, etc.)",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 246,
            "description": "visualizer is a reference to the parent Visualizer instance.",
            "itemtype": "property",
            "name": "visualizer",
            "type": "Visualizer",
            "required": 1,
            "class": "Visualizer.Colorer",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 255,
            "description": "init is called upon creation of a Visualizer Colorer Object.\nIt is responsible for the initial processing and setup of the Object.",
            "is_constructor": 1,
            "class": "Visualizer.Colorer",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 267,
            "description": "freshColorPalette creates a new copy of\nthe main color scheme and returns it.",
            "itemtype": "method",
            "name": "freshColorPalette",
            "return": {
                "description": "A collection of colors",
                "type": "Array"
            },
            "class": "Visualizer.Colorer",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 279,
            "description": "fixed accepts a keyword, and attempts to use the keyword\nto find a relevant color (e.g. \"positive\" may be \"green\").\n\nIf a valid keyword is passed and a relevant color isn't found,\na color is assigned from the rotating set.",
            "itemtype": "method",
            "name": "fixed",
            "params": [
                {
                    "name": "key",
                    "description": "The key for which a color is to be found",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A color",
                "type": "String"
            },
            "class": "Visualizer.Colorer",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 301,
            "description": "uniquePalette is a collection of sets of remaining\ncolors. Often it will only have a main set, but some\napplications may have more complex coloring needs.",
            "itemtype": "property",
            "name": "uniquePalette",
            "type": "Object (of Objects)",
            "required": 1,
            "class": "Visualizer.Colorer",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 314,
            "description": "_assignedUniq is a collection of sets of used colors\n(accessed by key).\nOften it will only have a main set, but some\napplications may have more complex coloring needs.",
            "itemtype": "property",
            "name": "uniquePalette",
            "type": "Object (of Objects)",
            "required": 1,
            "class": "Visualizer.Colorer",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 328,
            "description": "unique is a function used to get a unique color for a\ngiven key within a given set (set defaults to \"main\").\n\nThis function has helper properties to handle assigning\nand unassigning colors, determining what the next color\nwill be, and so on.",
            "todo": [
                "consider refactoring / making an Object instead of Function\n(Sorry for the currently complex code)"
            ],
            "itemtype": "method",
            "name": "unique",
            "params": [
                {
                    "name": "key",
                    "description": "The key for which a color is to be found",
                    "type": "String"
                },
                {
                    "name": "set",
                    "description": "The color set used to search get a color",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'main'"
                }
            ],
            "return": {
                "description": "A color or undefined...",
                "type": "String"
            },
            "class": "Visualizer.Colorer",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 354,
            "description": "_setUniqueProps sets up the helper sub-functions on the `unique` function.\n\nThis is complex, but allows the following syntax style:\n\n```javascript\n colorer.unique(\"Dylan\") => undefined\n colorer.unique.next() => \"green\"\n\n colorer.unique.assign(\"Dylan\") => undefined\n colorer.unique(\"Dylan\") => \"green\"\n colorer.unique.next() => \"purple\"\n\n colorer.unique.unassign(\"Dylan\") => undefined\n colorer.unique(\"Dylan\") => undefined\n```",
            "itemtype": "method",
            "name": "_setUniqueProps",
            "return": {
                "description": "",
                "type": "Void"
            },
            "access": "private",
            "tagname": "",
            "class": "Visualizer.Colorer",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 377,
            "description": "unique.next returns the next available color which can be\nassigned to a key.",
            "itemtype": "method",
            "name": "unique.next",
            "params": [
                {
                    "name": "set",
                    "description": "The color set used to search get a color",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'main'"
                }
            ],
            "return": {
                "description": "A color",
                "type": "String"
            },
            "class": "Visualizer.Colorer",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 395,
            "description": "unique.assign attempts to assign a color to a key within a color set.",
            "itemtype": "method",
            "name": "unique.assign",
            "params": [
                {
                    "name": "key",
                    "description": "The key for which a color is to be assigned",
                    "type": "String"
                },
                {
                    "name": "set",
                    "description": "The color set used to search get a color",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'main'"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer.Colorer",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 417,
            "description": "unique.unassign attempts to unassign a color to a key within a color set.\nThe color is returned to the palette so that it may be reused later.",
            "itemtype": "method",
            "name": "unique.unassign",
            "params": [
                {
                    "name": "key",
                    "description": "The key for which a color is to be unassigned",
                    "type": "String"
                },
                {
                    "name": "set",
                    "description": "The color set used to search get a color",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'main'"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer.Colorer",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 446,
            "description": "unique.resetSet removes colors from all keys within the given set,\nand also replenishes the palette.",
            "itemtype": "method",
            "name": "unique.resetSet",
            "params": [
                {
                    "name": "set",
                    "description": "The color set used to search get a color",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer.Colorer",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 461,
            "description": "unique._prepareSet creates and prepares a color set if it doesn't yet exist.",
            "itemtype": "method",
            "name": "unique._prepareSet",
            "params": [
                {
                    "name": "set",
                    "description": "The color set used to search get a color",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer.Colorer",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 477,
            "description": "_defaultAssigned is the default color to use for highlighting an item\n(when no other colors in the scheme apply - such as when you\nwish to have unique colors per-key but have no more colors available)",
            "itemtype": "property",
            "name": "_defaultAssigned",
            "type": "String (a color)",
            "class": "Visualizer.Colorer",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 487,
            "description": "_defaultUnassigned is the default color to use for\nnon-highlighted, but still colored, items.",
            "itemtype": "property",
            "name": "_defaultUnassigned",
            "type": "String (a color)",
            "class": "Visualizer.Colorer",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 496,
            "description": "_colorScheme is a collection of colors used in the visualization.",
            "itemtype": "property",
            "name": "_colorScheme",
            "type": "Array (of color Strings)",
            "class": "Visualizer.Colorer",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 508,
            "description": "_rotating_color returns an assigned color for a given key\nif available, otherwise assigns a color from the _colorScheme\n(unlike unique(), if all colors are used up, it\nstarts from the first color again.)",
            "itemtype": "method",
            "name": "_rotating_color",
            "params": [
                {
                    "name": "key",
                    "description": "The key for which a color is to be found",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A color",
                "type": "String"
            },
            "class": "Visualizer.Colorer",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 534,
            "description": "_fixedVals is a collection of key => color pairs for\ncommonly used keys",
            "itemtype": "property",
            "name": "_fixedVals",
            "type": "Object (key => String (color) pairs)",
            "required": 1,
            "class": "Visualizer.Colorer",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 581,
            "description": "visualizer is a reference to the parent Visualizer instance.",
            "itemtype": "property",
            "name": "visualizer",
            "type": "Visualizer",
            "required": 1,
            "class": "Visualizer.Scene",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 590,
            "description": "identifier is a string identifier uniquie to this instance of a Scene",
            "itemtype": "property",
            "name": "identifier",
            "type": "String",
            "required": 1,
            "class": "Visualizer.Scene",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 599,
            "description": "title is simply a title for the scene, which some\nVisualizer applications may find useful for guiding users.",
            "itemtype": "property",
            "name": "title",
            "type": "String",
            "optional": 1,
            "class": "Visualizer.Scene",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 609,
            "description": "description is simply a description of the scene, which some\nVisualizer applications may find useful for describing a scene to users.",
            "itemtype": "property",
            "name": "description",
            "type": "String",
            "optional": 1,
            "class": "Visualizer.Scene",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 619,
            "description": "drawWait is the debounce time waited before updating the scene.\nIf a scene's reload is requested many times in rapid succession it will wait\nuntil drawWait milliseconds after the last call before executing the reload.",
            "itemtype": "property",
            "name": "drawWait",
            "type": "Integer (milliseconds)",
            "default": "100",
            "required": 1,
            "class": "Visualizer.Scene",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 631,
            "description": "widgets references a collection of \"widget\" Objects, each of which\nshould reference a Module, a ModuleView, an operation to call upon the ModuleView,\nand any additional parameters required (specifications for the ModuleView to follow).",
            "itemtype": "property",
            "name": "widgets",
            "type": "Array",
            "required": 1,
            "class": "Visualizer.Scene",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 644,
            "description": "requestedModuleViews is a computed property that returns\na dictionary of Modules -> ModuleViews , used to determine which views will be\nused by the scene. This is particularly useful when changing scenes to determine\nwhich Views need to be cleared out, and which will be used in the next scene.\n\nUsed as a searchable dictionary: `requestedModuleViews[moduleA][moduleViewA] => true`",
            "itemtype": "property",
            "name": "requestedModuleViews",
            "type": "Object",
            "class": "Visualizer.Scene",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 667,
            "description": "clearUnusedViews sends a \"clear\" request to each ModuleView used by the current\ninstance of Visualizer, which isn't used in any of this scene's widgets.\nIn essence it ensures that any Views that are not currently in use are cleansed.",
            "itemtype": "method",
            "name": "clearUnusedViews",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer.Scene",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 701,
            "description": "runWidgets iterated this scene's widgets, and requests that the ModuleView specified\nfor each widget executes the operation specified for each widget.\n\nFor example, it may tell one ModuleView, a word cloud, to draw itself, and\nanother ModuleView, a set of icons, to group themselves by common-words.",
            "itemtype": "method",
            "name": "runWidgets",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer.Scene",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 725,
            "description": "reload initiates the process of updating the visualization by cleaning out old Views\nand updating all current widgets.\n\nPrevents rapid-exectuion by delaying each request by an amount of time specified\n by property drawWait, and afterward only using the most recent request (as a debounce).",
            "itemtype": "method",
            "name": "reload",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer.Scene",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 762,
            "description": "loaded is a boolean variable indicating whether or the world is\nprepared to hold a visualization.\n\nCurrently it simply check's whether the world JQuery object exists",
            "itemtype": "property",
            "name": "loaded",
            "type": "Boolean",
            "class": "Visualizer.World",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 773,
            "description": "$ is a method which returns the world's JQuery Object, worldObj.\nIf a parameter is passed, $ will attempt to find that parameter\nwithing the structure of the worldObj.",
            "itemtype": "method",
            "name": "$",
            "params": [
                {
                    "name": "selector",
                    "description": "A CSS selector to use to find nodes within this World",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "JQuery Object"
            },
            "class": "Visualizer.World",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 790,
            "description": "resize recalculates the width, height, top, and left properties of the\nworldObj DOM Element\n\nThis method is automatically called when a World is created.",
            "itemtype": "method",
            "name": "resize",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer.World",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 813,
            "description": "_bindGlobalEvents binds this World's resize event to the window's resize,\nsuch that every time the window's size changes this World attempts to\nupdate its properties to reflect the new window.\n\nPrivate, since this method is automatically called when a World is created.",
            "itemtype": "method",
            "name": "_bindGlobalEvents",
            "return": {
                "description": "",
                "type": "Void"
            },
            "access": "private",
            "tagname": "",
            "class": "Visualizer.World",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 832,
            "description": "_bindWorldEvents binds and generic event listeners that\noccur within the World's domain\n\nPrivate, since this method is automatically called when a World is created\nas well as when the worldObj changes to reference a new area.",
            "itemtype": "method",
            "name": "_bindWorldEvents",
            "return": {
                "description": "",
                "type": "Void"
            },
            "access": "private",
            "tagname": "",
            "class": "Visualizer.World",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 850,
            "description": "injectDefaultWorld clears out the Visualizer World's contents, injects the basic\nvisualizer skeleton",
            "deprecated": true,
            "deprecationMessage": "@todo Deprecate this. ModuleViews should take care of this on a per-App basis...",
            "itemtype": "method",
            "name": "injectDefaultWorld",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer.World",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 865,
            "description": "_handlePhasedButtonClick is called when an element with class phasedButton\nis clicked. Adds a class 'disabledItem' to the element for 2 seconds;\nif the element is clicked again before the class 'disabledItem' class expires,\nthe click will be ignored.",
            "itemtype": "method",
            "name": "_handlePhasedButtonClick",
            "return": {
                "description": "",
                "type": "Void"
            },
            "access": "private",
            "tagname": "",
            "class": "Visualizer.World",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 891,
            "description": "removeInstancesOf removes traces of a provided value from an Array",
            "itemtype": "method",
            "name": "removeInstancesOf",
            "params": [
                {
                    "name": "value",
                    "description": "The item to find-and-remove"
                }
            ],
            "return": {
                "description": "The modified Array (with value removed)",
                "type": "Array"
            },
            "class": "NativeClass.Array",
            "namespace": "NativeClass"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 915,
            "description": "shuffleVals - Fisher-Yates algorithm for shuffling arrays\nin-place. (Essentially goes through each slot in array and\nswitches its value with one from a random slot...)",
            "itemtype": "method",
            "name": "shuffleVals",
            "return": {
                "description": "The shuffled Array",
                "type": "Array"
            },
            "class": "NativeClass.Array",
            "namespace": "NativeClass"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 945,
            "description": "values takes an Object and returns its values\n(similar to `.keys()`)",
            "itemtype": "method",
            "name": "values",
            "return": {
                "description": "The values",
                "type": "Array"
            },
            "class": "NativeClass.Array",
            "namespace": "NativeClass"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 967,
            "description": "addExpiringClass adds a temporary class to a JQuery object.\nThe class has an expiry, after which it is removed.",
            "itemtype": "method",
            "name": "addExpiringClass",
            "params": [
                {
                    "name": "className",
                    "description": "Class name",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"disabled\""
                },
                {
                    "name": "timeout",
                    "description": "Number of milliseconds until class expires",
                    "type": "Integer",
                    "optional": true,
                    "optdefault": "1000"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "jQuery.fn",
            "namespace": "jQuery"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1000,
            "description": "truncateTo ensures a string is no longer than a given size limit.\n(In the case that it is longer, a suffix can be given for truncation)",
            "itemtype": "method",
            "name": "truncateTo",
            "params": [
                {
                    "name": "maxLength",
                    "description": "The maximum length of the String",
                    "type": "Integer"
                },
                {
                    "name": "suffix",
                    "description": "A String to use append in case of truncation",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"…\""
                }
            ],
            "return": {
                "description": "The String cut to maxLength or fewer characters",
                "type": "String"
            },
            "class": "NativeClass.String",
            "namespace": "NativeClass"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1029,
            "description": "advancedIndexOf searches the object String for a parameter\nsubstring, allows additional options (such as case-insensitivity).",
            "itemtype": "method",
            "name": "advancedIndexOf",
            "params": [
                {
                    "name": "subString",
                    "description": "The substring to search for",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Additional options for searching",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Similar to indexOf: -1 if not found,\n                  otherwise the first start position of the substring.",
                "type": "Integer"
            },
            "class": "NativeClass.String",
            "namespace": "NativeClass"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1056,
            "description": "includes searches the object String for a parameter\nsubstring, returns boolean, accepts optional parameter\nto specify whether the search should be case-insensitive.",
            "itemtype": "method",
            "name": "includes",
            "params": [
                {
                    "name": "subString",
                    "description": "The substring to search for",
                    "type": "String"
                },
                {
                    "name": "isCaseInsensitive",
                    "description": "Specify whether search is case-sensitive",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "True if substring was found, otherwise false",
                "type": "Boolean"
            },
            "class": "NativeClass.String",
            "namespace": "NativeClass"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1076,
            "description": "beginsWith searches the start of the object String for a parameter\nsubstring, returns boolean, accepts optional parameter\nto specify whether the search should be case-insensitive.",
            "itemtype": "method",
            "name": "beginsWith",
            "params": [
                {
                    "name": "subString",
                    "description": "The substring to search for",
                    "type": "String"
                },
                {
                    "name": "isCaseInsensitive",
                    "description": "Specify whether search is case-sensitive",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "True if substring was found at the beginning, otherwise false",
                "type": "Boolean"
            },
            "class": "NativeClass.String",
            "namespace": "NativeClass"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1096,
            "description": "capitalizeLetter is a String capitalize function adapted from\nhttp://stackoverflow.com/a/3291856/624590 .\nCapitalizes the letter at position n of the object String.",
            "itemtype": "method",
            "name": "capitalizeLetter",
            "params": [
                {
                    "name": "n",
                    "description": "The index of the character to capitalize",
                    "type": "Integer",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "The modified String with capitalized letter",
                "type": "String"
            },
            "class": "NativeClass.String",
            "namespace": "NativeClass"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1118,
            "description": "titleize creates a title-formatted copy of a String",
            "itemtype": "method",
            "name": "titleize",
            "return": {
                "description": "The modified String with updated casing",
                "type": "String"
            },
            "class": "NativeClass.String",
            "namespace": "NativeClass"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1134,
            "description": "removeInitialUnderscore removes the first leading underscore from a String",
            "itemtype": "method",
            "name": "removeInitialUnderscore",
            "return": {
                "description": "The modified String with leading underscore removed",
                "type": "String"
            },
            "class": "NativeClass.String",
            "namespace": "NativeClass"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1163,
            "description": "existsWithValue checks if a values isn't null/undefined",
            "itemtype": "method",
            "name": "existsWithValue",
            "params": [
                {
                    "name": "item",
                    "description": "An item to check existence of",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "false if param is null or undefined, otherwise true",
                "type": "Boolean"
            },
            "class": "Visualizer.Utils",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1174,
            "description": "waitForRepeatingEvents is a debounce-like function for preventing\nmultiple execution. It should be called with a function and an\namount of time to wait. It can also be provided a timer name so as\nto namespace the blocked items. It can also be called with an Object\ntimer set to allow different objects to not prevent the execution of\nfunctions in others.",
            "itemtype": "method",
            "name": "waitForRepeatingEvents",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to be called at end of waiting time",
                    "type": "Function"
                },
                {
                    "name": "timeout",
                    "description": "Number of milliseconds to wait before exectuing function",
                    "type": "Integer"
                },
                {
                    "name": "String",
                    "description": "timerName A namespace for the debounce @default \"default timer\"",
                    "optional": true
                },
                {
                    "name": "Object",
                    "description": "timerSet A collection of timers to use in blocking functions @default",
                    "optional": true
                }
            ],
            "return": {
                "description": "The Timeout id assigned by the browser for the created timeout.",
                "type": "Integer"
            },
            "class": "Visualizer.Utils",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1206,
            "description": "minVal takes two parameters, returns the smaller",
            "itemtype": "method",
            "name": "minVal",
            "params": [
                {
                    "name": "a",
                    "description": "An item to compare",
                    "type": "Untyped"
                },
                {
                    "name": "b",
                    "description": "An item to compare",
                    "type": "Untyped"
                }
            ],
            "return": {
                "description": "The smaller item",
                "type": "Untyped"
            },
            "class": "Visualizer.Utils",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1222,
            "description": "maxVal takes two parameters, returns the larger",
            "itemtype": "method",
            "name": "maxVal",
            "params": [
                {
                    "name": "a",
                    "description": "An item to compare",
                    "type": "Untyped"
                },
                {
                    "name": "b",
                    "description": "An item to compare",
                    "type": "Untyped"
                }
            ],
            "return": {
                "description": "The larger item",
                "type": "Untyped"
            },
            "class": "Visualizer.Utils",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1238,
            "description": "boundedVal takes three parameters: an item, the lower bound,\nand the upper bound. If the item is between the bounds,\nthe item is returned, otherwise the failed bound is returned.",
            "itemtype": "method",
            "name": "boundedVal",
            "params": [
                {
                    "name": "tried_value",
                    "description": "An item to compare",
                    "type": "Untyped"
                },
                {
                    "name": "minimum_value",
                    "description": "The lower bound",
                    "type": "Untyped"
                },
                {
                    "name": "maximum_value",
                    "description": "The upper bound",
                    "type": "Untyped"
                }
            ],
            "return": {
                "description": "An object that's within the boundaries.",
                "type": "Untyped"
            },
            "class": "Visualizer.Utils",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1259,
            "description": "randBetween provides a random number between two values.",
            "itemtype": "method",
            "name": "randBetween",
            "params": [
                {
                    "name": "min",
                    "description": "The lower bound",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "max",
                    "description": "The upper bound",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "10"
                }
            ],
            "return": {
                "description": "A random number between min and max",
                "type": "Number"
            },
            "class": "Visualizer.Utils",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1277,
            "description": "randIntBetween provides a random (rounded) Integer between two values.",
            "itemtype": "method",
            "name": "randIntBetween",
            "params": [
                {
                    "name": "min",
                    "description": "The lower bound",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "The upper bound",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A random Integer between min and max",
                "type": "Integer"
            },
            "class": "Visualizer.Utils",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1289,
            "description": "isArray returns a flag of whether the parameter is of type Array",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "input",
                    "description": "The object to check",
                    "type": "Untyped"
                }
            ],
            "return": {
                "description": "Whether the input is an Array or not.",
                "type": "Boolean"
            },
            "class": "Visualizer.Utils",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1300,
            "description": "relativeSizeString parses an input size for either an explicit\nvalue, or a value in relationship to some parent value.\nE.g. \"50%\" of 900 = 450, \"50\" = 50, \"50px\" = 50",
            "itemtype": "method",
            "name": "relativeSizeString",
            "params": [
                {
                    "name": "val",
                    "description": "The input value to parse",
                    "type": "String"
                },
                {
                    "name": "parentVal",
                    "description": "A number to use for relative parsing",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The parsed numeric value",
                "type": "Number"
            },
            "class": "Visualizer.Utils",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1320,
            "description": "intersectionSafe is simple intersection code, iterates along two\nsorted arrays incrementing the index of the smaller value\n(if values are equal, it is part of intersection, and so store position and iterate both).\nReturns array of indices of intersecting values with respect to the first array passed.\n\nintersectionSafe is modified from code found on StackOverflow at:\nhttp://stackoverflow.com/a/1885660/624590",
            "itemtype": "method",
            "name": "intersectionSafe",
            "params": [
                {
                    "name": "a",
                    "description": "A sorted Array for comparison",
                    "type": "Array"
                },
                {
                    "name": "b",
                    "description": "A sorted Array for comparison",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The intersection of the two Arrays",
                "type": "Array"
            },
            "class": "Visualizer.Utils",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1353,
            "description": "intersectionCount is a modified form of intersectionSafe that simply\nincrements a counter instead of building an intersection Array.\n(Faster because increments rather than pushing values to array,\nalso more memory efficient; JSPerf suggests 100% performance increase\n- beneficial for large datasets...)",
            "itemtype": "method",
            "name": "intersectionCount",
            "params": [
                {
                    "name": "a",
                    "description": "A sorted Array for comparison",
                    "type": "Array"
                },
                {
                    "name": "b",
                    "description": "A sorted Array for comparison",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The size of the intersection of the two Arrays",
                "type": "Integer"
            },
            "class": "Visualizer.Utils",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1384,
            "description": "cloneArray creates a copy of an Array.",
            "deprecated": true,
            "deprecationMessage": "use Array.copy instead.",
            "itemtype": "method",
            "name": "cloneArray",
            "params": [
                {
                    "name": "inputArray",
                    "description": "An Array to copy",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A copy of the input Array",
                "type": "Array"
            },
            "class": "Visualizer.Utils",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1486,
            "description": "visualizer is a reference to the parent Visualizer instance.",
            "itemtype": "property",
            "name": "visualizer",
            "type": "Visualizer",
            "required": 1,
            "class": "Visualizer.Module",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1495,
            "description": "maxLength is an integer size of how much data should be displayed.\nSometimes a project will collect more data than is practical to display\nto the user (either because it will be confusing, or otherwise too slow);\nthis property represents that limit.",
            "itemtype": "property",
            "name": "maxLength",
            "type": "Integer",
            "required": 1,
            "class": "Visualizer.Module",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1507,
            "description": "content is the full set of data (in Array , Ember.Array) form that is\navailable to this Module.\n\nNote: this attribute should only be accessed from the\ndata-management side of your app; it's where you dump data, and it's\nwhat you generally access for front-end filtering. This Module's\nModuleViews should not access the content, however - they should access\nthe dataset (which is a subset of content).",
            "itemtype": "property",
            "name": "content",
            "type": "Ember.Array",
            "required": 1,
            "class": "Visualizer.Module",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1525,
            "description": "dataset is the subset of content used for current visualization.\nIt can potentially be the exact same data as content, in full,\nbut it can also be a limited/truncated version (often using the\nmaxLength property). It may also filtered down by properties, etc.\n\nModuleViews should only look here for their Module data.",
            "itemtype": "property",
            "name": "dataset",
            "type": "Ember.Array",
            "required": 1,
            "class": "Visualizer.Module",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1540,
            "description": "moduleViews an object dictionary/map of Visualizer ModuleView objects,\neach of which must be relevant to this particular Module's data structuring.\n\nFor example, if this Module is a set of words with frequencies, a WordCloud\nmay be an applicable ModuleView.",
            "itemtype": "property",
            "name": "moduleViews",
            "type": "Ember.Object",
            "required": 1,
            "class": "Visualizer.Module",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1555,
            "description": "init is called upon creation of a Visualizer Module Object.\nIt is responsible for the initial processing and setup of the Object.\n\nAny preprocessing that is required to make the Module valid should be\ndone, at latest, on init.\n\nIf the Module defines a setDefaultViews function (to prepopulate its\nModuleViews), that function will be called automatically.",
            "is_constructor": 1,
            "class": "Visualizer.Module",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1571,
            "description": "forceLimit sorts the current data by a provided key, and selects only the\nfirst maxLength (property) items for this Module's dataset, ensuring that\nthe limit to the viewed-data's size is enforced.",
            "todo": [
                "consider implementing a n-item max-heap data structure instead of sorting"
            ],
            "itemtype": "method",
            "name": "forceLimit",
            "params": [
                {
                    "name": "key",
                    "description": "Property to use for sorting the data.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'timestamp'"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer.Module",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1593,
            "description": "groupedBy creates a cached property on the Module to retrieve its data\nin the form of a two-dimensional Array, where the sub arrays contain\nthis Module's dataset split into sets that share a common (passed) property.\n\nThe outside Array is sorted by length, so the largest groups are at the start.\n\nSince the result is cached, it will only be recomputed when the dataset changes,\nkeeping this efficient. The first time you use groupBy for any given property\nafter the data changes (or is created) runs O(nlogn), but each subsequent access\nis simply O(1) as it simply grabs the previous data. Say what??? :P",
            "itemtype": "method",
            "name": "groupedBy",
            "params": [
                {
                    "name": "property",
                    "description": "Property to use for grouping the data.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Module's dataset grouped by the property",
                "type": "Array"
            },
            "class": "Visualizer.Module",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1625,
            "description": "_groupedBy groups the Module's dataset by a given property, returning\nan unsorted, two-dimensional array.\n\nThis method should not be called explicitly, instead developers should\ngo through the `groupedBy` method (no leading underscore), which\ncaches the groups (making redraws far more efficient)",
            "itemtype": "method",
            "name": "_groupedBy",
            "params": [
                {
                    "name": "property",
                    "description": "Property to use for grouping the data.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Module's dataset grouped by the property",
                "type": "Array"
            },
            "class": "Visualizer.Module",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1668,
            "description": "module is a reference to the parent Module for this ModuleView instance.",
            "itemtype": "property",
            "name": "module",
            "type": "Visualizer.Module",
            "required": 1,
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1677,
            "description": "containerSelector is a string CSS selector used for finding\nthis ModuleView's window in a Visualization.\n\nOften unique, but occasionally multiple ModuleViews will be\nwritten to share a container.\n\nOften this property will be specified in a widget's parameters,\notherwise child classes to ModuleView should specify defaults.\nIf a widget does specify a `container` param, it will be set and used\nrunning any operation.",
            "itemtype": "property",
            "name": "containerSelector",
            "type": "String",
            "required": 1,
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1695,
            "description": "previousSelectors is a list history of selectors that were\npreviously set as this instance of a ModuleView's containerSelector.\n\nThis may be useful for navigation, or for cleaning up after a visualization.",
            "itemtype": "property",
            "name": "previousSelectors",
            "type": "Array",
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1708,
            "description": "visualizer is a reference to the parent Visualizer instance.",
            "itemtype": "property",
            "name": "visualizer",
            "type": "Visualizer",
            "required": 1,
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1717,
            "description": "data is a reference to the visible data for visualization.",
            "itemtype": "property",
            "name": "data",
            "type": "Ember.Array",
            "required": 1,
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1726,
            "description": "arrangedContent is a reference to all Module data (sorted/arranged).\nThis property should only seldom be accessed because it includes\ndata which is deemed irrelevant by the Module (filtered, etc.)\n\nIt may, however, be useful if a View decides to animate old data away\nupon filtering / limiting its viewable data.",
            "itemtype": "property",
            "name": "arrangedContent",
            "type": "Ember.Array",
            "optional": 1,
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1740,
            "description": "dimensionsDidChange is a flag used by ModuleViews to decide how much\nprocessing is required when they run an operation.\n\nIf all dimensions, including visible data, width, and height, are\nunchanged, often times the old Visualization can simply be shown.\n\nSet to true by default, so that ModuleViews can have a proper first-draw.",
            "itemtype": "property",
            "name": "dimensionsDidChange",
            "type": "Boolean",
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1754,
            "description": "init is called upon creation of a Visualizer ModuleView Object.\nIt is responsible for the initial processing and setup of the Object.\n\nAny preprocessing that is required to make the Module valid should be\ndone, at latest, on init. By default it sets the parent Module reference.",
            "is_constructor": 1,
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1767,
            "description": "clear cleanses/hides the current ModuleView from the visualization.\n\nThis method is often called when a widget representing the ModuleView\nleaves a visualization (either being removed from a scene,\nor not being part of a new scene.)\n\nEach ModuleView should implement/override this, and should\nprovide (at least) the following functionality:\n    - hide the container/elements (to prevent overlap/event-disruption),\n    - unset isDrawn so that next time we know to fully redraw, etc.\n\nOptionally, it should also empty the DOM Node/SVG to save memory",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1786,
            "description": "destroy totally removes the current ModuleView from the visualization.\nThis should entirely empty and remove any DOM-or-SVG Elements from the\ndocument.\n\nThis method is rarely called unless the Visualizer is being removed entirely.\n\nEach ModuleView should implement/override this function.",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1802,
            "description": "run is used used to execute a widget's operation on a ModuleView.\nMany times additional parameters are passed, these assist in updating a\nModuleView by providing the widget's specifications (container, width,\nany data limitations, etc.)\n\nIf params includes a `container` key, its value will be used to define\nthis particular ModuleView's container viewport.",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "operation",
                    "description": "The method on this ModuleView to run.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Any additional specifications for the operation.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1827,
            "description": "updateSelector takes a new containerSelector parameter, and uses it to\nchange this ModuleView's viewport. It also updates the `previousSelectors`\nhistory to contain the selector that was used before this method was called.",
            "itemtype": "method",
            "name": "updateSelector",
            "params": [
                {
                    "name": "containerSelector",
                    "description": "The new selector to use as a viewport",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1845,
            "description": "$container is a method which returns the ModuleView's container/viewport\nJQuery Object.\n\nIf a parameter is passed, $container will attempt to find that parameter\nwithing the structure of its container object.",
            "itemtype": "method",
            "name": "$container",
            "params": [
                {
                    "name": "selector",
                    "description": "A CSS selector to use to find nodes within this World",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "JQuery Object"
            },
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1862,
            "description": "hardReset clears out the ModuleView and tells it that dimensionsDidChange,\nso the next redraw/execution is a fresh one (fully recalculated).\n\nThis is automatically called when the ModuleView's data changes.",
            "itemtype": "method",
            "name": "hardReset",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1876,
            "description": "widgetParamedOutlineCSS provides an Object where keys/values map to CSS attributes\nrelevant to the container ONLY for manually specified dimensions/positions.\n\nThe point of this method is to provide access to data that can be used to set the\nstyle of the DOM element containing this ModuleView to the manually-set specifications.\n\nIf a developer opts to simply use a container's size/position, this will return an\nempty object.",
            "itemtype": "method",
            "name": "widgetParamedOutlineCSS",
            "params": [
                {
                    "name": "params",
                    "description": "Any additional specifications for the operation",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A collection of manually-specified size/position values",
                "type": "Object"
            },
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1906,
            "description": "width getter/setter. Uses _updateDimension to coerce the set value\nto an expected format (as well as to determine whether a dimension changed).",
            "itemtype": "method",
            "name": "width",
            "params": [
                {
                    "name": "key",
                    "description": "ALWAYS set to \"width\"",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "A value for setting (undefined for getting)",
                    "optional": true
                }
            ],
            "return": {
                "description": "A collection of manually-specified size/position values",
                "type": "Integer"
            },
            "access": "private",
            "tagname": "( ONLY access via `.get('width')` or `.set('width', value)` !!!)",
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1920,
            "description": "height getter/setter. Uses _updateDimension to coerce the set value\nto an expected format (as well as to determine whether a dimension changed).",
            "itemtype": "method",
            "name": "height",
            "params": [
                {
                    "name": "key",
                    "description": "ALWAYS set to \"height\"",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "A value for setting (undefined for getting)",
                    "optional": true
                }
            ],
            "return": {
                "description": "The updated value",
                "type": "Integer"
            },
            "access": "private",
            "tagname": "( ONLY access via `.get('height')` or `.set('height', value)` !!!)",
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1934,
            "description": "_updateDimension is used when setting width or height.\nIt accepts a key (which should be set to \"width\" or \"height\"),\nand a value.\n\nThe value is rounded down to the nearest integer to keep the DOM clean,\nand to keep determining changes simple.\n\nIf the value isn't the same as this ModuleView's previous value for the\nsame key property, dimensionsDidChange flag will be set true so that the\nModuleView knows to perform its next operation with full calculations.",
            "itemtype": "method",
            "name": "_updateDimension",
            "params": [
                {
                    "name": "key",
                    "description": "Either \"width\" or \"height\"",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "A value for setting (undefined if just getting)",
                    "optional": true
                }
            ],
            "return": {
                "description": "The updated value",
                "type": "Integer"
            },
            "access": "private",
            "tagname": "( used by width/height setters )",
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 1963,
            "description": "_presetContainerAttrs is used when running an operation to ensure that\nrequired attributes based on the viewport (such as available width/height)\nfor visualization are set.\n\nIf width or height are manually specified, this will not update that attribute -\nin these cases, the ModuleView should know how to handle explicit dimensions.\nThe \"resizable mixin\" can help with this (more details in _resizable_mixin file)",
            "itemtype": "method",
            "name": "_presetContainerAttrs",
            "params": [
                {
                    "name": "params",
                    "description": "Any additional specifications for the operation.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer.ModuleView",
            "namespace": "Visualizer"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 2010,
            "description": "run hijacks the ModuleView's run method to first attempt to update\nthe viewport's size based on the parameter specifications.\nAfter attempting to update the size/position of the viewport,\nthe ModuleView's run function is allowed to proceed.",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "operation",
                    "description": "The method on this ModuleView to run.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Any additional specifications for the operation.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Visualizer.ModuleView.ResizableMixin",
            "namespace": "Visualizer.ModuleView"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 2029,
            "description": "_updateSize scans the widget-sent params for manually-set\nsize/position values, uses these to set up the ModuleView's\nrelevant attributes.",
            "itemtype": "method",
            "name": "_updateSize",
            "params": [
                {
                    "name": "params",
                    "description": "Any additional specifications for the operation.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "access": "private",
            "tagname": "(called when `run` attempts to execute an operation)",
            "class": "Visualizer.ModuleView.ResizableMixin",
            "namespace": "Visualizer.ModuleView"
        },
        {
            "file": "build/js/j-visualizer.js",
            "line": 2066,
            "description": "_tryUpdateValue given a sizing/position-defining key and value,\nthis method attempts to parse the value and, if it's a relative\npercentage or String, coerce it to an integer.\n\nAllows values to be explicit (e.g. 50, or \"50px\"), or relative\nto the Visualizer's World (e.g. \"50%\"). Parameter relativeReq is\nused to specify which of the World's parameters should be used to\ndetermine a relative size (e.g. \"left\" uses the World's \"width\").\n\nparams may also specify an amount of padding.",
            "itemtype": "method",
            "name": "_tryUpdateValue",
            "params": [
                {
                    "name": "key",
                    "description": "The CSS property being set (width, height, left, top)",
                    "type": "String"
                },
                {
                    "name": "val",
                    "description": "The value to use for setting the ModuleView property",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Any additional specifications for the operation.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "relativeReq",
                    "description": "The relevant property (to the key) on the World",
                    "type": "String",
                    "optional": true,
                    "optdefault": "key"
                }
            ],
            "return": {
                "description": "True if the dimension changed, false otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "(called when `_updateSize` attempts to execute)",
            "class": "Visualizer.ModuleView.ResizableMixin",
            "namespace": "Visualizer.ModuleView"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\ninit is called upon creation of a Visualizer Object.\nIt is responsible for the initial processing and setup of the Object.",
            "line": " build/js/j-visualizer.js:83"
        },
        {
            "message": "Missing item type\nAlias for Visualizer.World method: injectDefaultWorld",
            "line": " build/js/j-visualizer.js:113"
        },
        {
            "message": "Missing item type\ninit is called upon creation of a Visualizer Colorer Object.\nIt is responsible for the initial processing and setup of the Object.",
            "line": " build/js/j-visualizer.js:255"
        },
        {
            "message": "Missing item type\ninit is called upon creation of a Visualizer Module Object.\nIt is responsible for the initial processing and setup of the Object.\n\nAny preprocessing that is required to make the Module valid should be\ndone, at latest, on init.\n\nIf the Module defines a setDefaultViews function (to prepopulate its\nModuleViews), that function will be called automatically.",
            "line": " build/js/j-visualizer.js:1555"
        },
        {
            "message": "Missing item type\ninit is called upon creation of a Visualizer ModuleView Object.\nIt is responsible for the initial processing and setup of the Object.\n\nAny preprocessing that is required to make the Module valid should be\ndone, at latest, on init. By default it sets the parent Module reference.",
            "line": " build/js/j-visualizer.js:1754"
        }
    ]
}